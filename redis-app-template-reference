// server file 




const methodOverride = require("method-override");
const redis = require("redis");




// create redis client
let client = redis.createClient();
client.on("connect", () => {
  console.log("Connected to redis");
});



// method override
app.use(methodOverride("_method"));

// routes - searchpage
app.get("/", (req, res, next) => {
  res.render("any-choice");
});

// Search processing
app.post("/user/search", function (req, res, next) {
  let id = req.body.id;

  client.hgetall(id, function (err, obj) {
    if (!obj) {
      res.render("searchusers", {
        error: "User does not exist",
      });
    } else {
      obj.id = id;
      console.log(obj);
      res.render("details", {
        user: obj,
      });
    }
  });
});

// routes - add user page
app.get("/user/add", (req, res, next) => {
  res.render("adduser");
});
// process add user page
app.post("/user/add", (req, res, next) => {
  let id = req.body.id;
  let first_name = req.body.first_name;
  let last_name = req.body.last_name;
  let email = req.body.email;
  let phone = req.body.phone;

  client.hmset(
    id,
    [
      "first_name",
      first_name,
      "last_name",
      last_name,
      "email",
      email,
      "phone",
      phone,
    ],
    (err, reply) => {
      if (err) {
        console.log(err);
      }
      console.log(reply);
      res.redirect("/");
    }
  );
});

// delete user
app.delete("/user/delete/:id", (req, res, next) => {
  //   console.log(req.params);
  client.del(req.params.id);

  res.redirect("/");
});

